// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: accountreg.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CSAccountReg struct {
	Accountname          string   `protobuf:"bytes,1,opt,name=accountname,proto3" json:"accountname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSAccountReg) Reset()         { *m = CSAccountReg{} }
func (m *CSAccountReg) String() string { return proto.CompactTextString(m) }
func (*CSAccountReg) ProtoMessage()    {}
func (*CSAccountReg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7899d805929cae9d, []int{0}
}
func (m *CSAccountReg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSAccountReg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSAccountReg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSAccountReg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSAccountReg.Merge(m, src)
}
func (m *CSAccountReg) XXX_Size() int {
	return m.Size()
}
func (m *CSAccountReg) XXX_DiscardUnknown() {
	xxx_messageInfo_CSAccountReg.DiscardUnknown(m)
}

var xxx_messageInfo_CSAccountReg proto.InternalMessageInfo

func (m *CSAccountReg) GetAccountname() string {
	if m != nil {
		return m.Accountname
	}
	return ""
}

type SCAccountReg struct {
	Errid                int32        `protobuf:"varint,1,opt,name=errid,proto3" json:"errid,omitempty"`
	Accountinfo          *AccountInfo `protobuf:"bytes,2,opt,name=accountinfo,proto3" json:"accountinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SCAccountReg) Reset()         { *m = SCAccountReg{} }
func (m *SCAccountReg) String() string { return proto.CompactTextString(m) }
func (*SCAccountReg) ProtoMessage()    {}
func (*SCAccountReg) Descriptor() ([]byte, []int) {
	return fileDescriptor_7899d805929cae9d, []int{1}
}
func (m *SCAccountReg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCAccountReg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCAccountReg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCAccountReg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCAccountReg.Merge(m, src)
}
func (m *SCAccountReg) XXX_Size() int {
	return m.Size()
}
func (m *SCAccountReg) XXX_DiscardUnknown() {
	xxx_messageInfo_SCAccountReg.DiscardUnknown(m)
}

var xxx_messageInfo_SCAccountReg proto.InternalMessageInfo

func (m *SCAccountReg) GetErrid() int32 {
	if m != nil {
		return m.Errid
	}
	return 0
}

func (m *SCAccountReg) GetAccountinfo() *AccountInfo {
	if m != nil {
		return m.Accountinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*CSAccountReg)(nil), "proto.CSAccountReg")
	proto.RegisterType((*SCAccountReg)(nil), "proto.SCAccountReg")
}

func init() { proto.RegisterFile("accountreg.proto", fileDescriptor_7899d805929cae9d) }

var fileDescriptor_7899d805929cae9d = []byte{
	// 159 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x48, 0x4c, 0x4e, 0xce,
	0x2f, 0xcd, 0x2b, 0x29, 0x4a, 0x4d, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x52, 0x82, 0x50, 0x89, 0xcc, 0xbc, 0xb4, 0x7c, 0x88, 0x8c, 0x92, 0x01, 0x17, 0x8f, 0x73, 0xb0,
	0x23, 0x44, 0x38, 0x28, 0x35, 0x5d, 0x48, 0x81, 0x8b, 0x1b, 0xaa, 0x28, 0x2f, 0x31, 0x37, 0x55,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x59, 0x48, 0x29, 0x8a, 0x8b, 0x27, 0xd8, 0x19, 0x49,
	0x87, 0x08, 0x17, 0x6b, 0x6a, 0x51, 0x51, 0x66, 0x0a, 0x58, 0x2d, 0x6b, 0x10, 0x84, 0x23, 0x64,
	0x02, 0x37, 0x07, 0x64, 0x99, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x10, 0xc4, 0x52, 0x3d,
	0xa8, 0x6e, 0xcf, 0xbc, 0xb4, 0xfc, 0x20, 0x64, 0x65, 0x4e, 0x02, 0x27, 0x1e, 0xc9, 0x31, 0x5e,
	0x78, 0x24, 0xc7, 0xf8, 0xe0, 0x91, 0x1c, 0xe3, 0x8c, 0xc7, 0x72, 0x0c, 0x49, 0x6c, 0x60, 0x1d,
	0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0x49, 0x93, 0xe3, 0xa7, 0xd4, 0x00, 0x00, 0x00,
}

func (m *CSAccountReg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSAccountReg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accountname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintAccountreg(dAtA, i, uint64(len(m.Accountname)))
		i += copy(dAtA[i:], m.Accountname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SCAccountReg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCAccountReg) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintAccountreg(dAtA, i, uint64(m.Errid))
	}
	if m.Accountinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintAccountreg(dAtA, i, uint64(m.Accountinfo.Size()))
		n1, err1 := m.Accountinfo.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintAccountreg(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CSAccountReg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Accountname)
	if l > 0 {
		n += 1 + l + sovAccountreg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SCAccountReg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errid != 0 {
		n += 1 + sovAccountreg(uint64(m.Errid))
	}
	if m.Accountinfo != nil {
		l = m.Accountinfo.Size()
		n += 1 + l + sovAccountreg(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovAccountreg(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozAccountreg(x uint64) (n int) {
	return sovAccountreg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CSAccountReg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountreg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSAccountReg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSAccountReg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountreg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAccountreg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAccountreg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountreg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountreg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccountreg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCAccountReg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAccountreg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCAccountReg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCAccountReg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errid", wireType)
			}
			m.Errid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountreg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAccountreg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthAccountreg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthAccountreg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Accountinfo == nil {
				m.Accountinfo = &AccountInfo{}
			}
			if err := m.Accountinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAccountreg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthAccountreg
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthAccountreg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAccountreg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAccountreg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountreg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAccountreg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAccountreg
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthAccountreg
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowAccountreg
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipAccountreg(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthAccountreg
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthAccountreg = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAccountreg   = fmt.Errorf("proto: integer overflow")
)
