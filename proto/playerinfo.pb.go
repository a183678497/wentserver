// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: playerinfo.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

//message是固定的。PlayerInfo是类名
type PlayerInfo struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Playerid             int64    `protobuf:"varint,2,opt,name=playerid,proto3" json:"playerid,omitempty"`
	Accountid            int64    `protobuf:"varint,3,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Accountname          string   `protobuf:"bytes,4,opt,name=accountname,proto3" json:"accountname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{0}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerInfo) GetPlayerid() int64 {
	if m != nil {
		return m.Playerid
	}
	return 0
}

func (m *PlayerInfo) GetAccountid() int64 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *PlayerInfo) GetAccountname() string {
	if m != nil {
		return m.Accountname
	}
	return ""
}

type PlayerInfos struct {
	Playerinfomap        map[int64]*PlayerInfo `protobuf:"bytes,2,rep,name=playerinfomap,proto3" json:"playerinfomap,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}              `json:"-"`
	XXX_unrecognized     []byte                `json:"-"`
	XXX_sizecache        int32                 `json:"-"`
}

func (m *PlayerInfos) Reset()         { *m = PlayerInfos{} }
func (m *PlayerInfos) String() string { return proto.CompactTextString(m) }
func (*PlayerInfos) ProtoMessage()    {}
func (*PlayerInfos) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{1}
}
func (m *PlayerInfos) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfos.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfos.Merge(m, src)
}
func (m *PlayerInfos) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfos) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfos.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfos proto.InternalMessageInfo

func (m *PlayerInfos) GetPlayerinfomap() map[int64]*PlayerInfo {
	if m != nil {
		return m.Playerinfomap
	}
	return nil
}

type CSPlayerInfo struct {
	Accountname          string   `protobuf:"bytes,1,opt,name=accountname,proto3" json:"accountname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPlayerInfo) Reset()         { *m = CSPlayerInfo{} }
func (m *CSPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*CSPlayerInfo) ProtoMessage()    {}
func (*CSPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{2}
}
func (m *CSPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPlayerInfo.Merge(m, src)
}
func (m *CSPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *CSPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CSPlayerInfo proto.InternalMessageInfo

func (m *CSPlayerInfo) GetAccountname() string {
	if m != nil {
		return m.Accountname
	}
	return ""
}

type SCPlayerInfo struct {
	Playerinfo           *PlayerInfo `protobuf:"bytes,1,opt,name=playerinfo,proto3" json:"playerinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *SCPlayerInfo) Reset()         { *m = SCPlayerInfo{} }
func (m *SCPlayerInfo) String() string { return proto.CompactTextString(m) }
func (*SCPlayerInfo) ProtoMessage()    {}
func (*SCPlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{3}
}
func (m *SCPlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCPlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCPlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCPlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPlayerInfo.Merge(m, src)
}
func (m *SCPlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *SCPlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SCPlayerInfo proto.InternalMessageInfo

func (m *SCPlayerInfo) GetPlayerinfo() *PlayerInfo {
	if m != nil {
		return m.Playerinfo
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerInfo)(nil), "proto.PlayerInfo")
	proto.RegisterType((*PlayerInfos)(nil), "proto.PlayerInfos")
	proto.RegisterMapType((map[int64]*PlayerInfo)(nil), "proto.PlayerInfos.PlayerinfomapEntry")
	proto.RegisterType((*CSPlayerInfo)(nil), "proto.CSPlayerInfo")
	proto.RegisterType((*SCPlayerInfo)(nil), "proto.SCPlayerInfo")
}

func init() { proto.RegisterFile("playerinfo.proto", fileDescriptor_9830a6503a3131b4) }

var fileDescriptor_9830a6503a3131b4 = []byte{
	// 263 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc8, 0x49, 0xac,
	0x4c, 0x2d, 0xca, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0x35, 0x5c, 0x5c, 0x01, 0x60, 0x29, 0xcf, 0xbc, 0xb4, 0x7c, 0x21, 0x21, 0x2e, 0x96, 0xbc,
	0xc4, 0xdc, 0x54, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xce, 0x20, 0x30, 0x5b, 0x48, 0x8a, 0x8b, 0x03,
	0xaa, 0x39, 0x45, 0x82, 0x49, 0x81, 0x51, 0x83, 0x39, 0x08, 0xce, 0x17, 0x92, 0xe1, 0xe2, 0x4c,
	0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0xc9, 0x4c, 0x91, 0x60, 0x06, 0x4b, 0x22, 0x04, 0x84, 0x14,
	0xb8, 0xb8, 0xa1, 0x1c, 0xb0, 0xa1, 0x2c, 0x60, 0x43, 0x91, 0x85, 0x94, 0xd6, 0x33, 0x72, 0x71,
	0x23, 0xac, 0x2f, 0x16, 0xf2, 0xe6, 0xe2, 0x45, 0x38, 0x34, 0x37, 0xb1, 0x40, 0x82, 0x49, 0x81,
	0x59, 0x83, 0xdb, 0x48, 0x15, 0xe2, 0x66, 0x3d, 0x24, 0xa5, 0x50, 0x36, 0x54, 0x9d, 0x6b, 0x5e,
	0x49, 0x51, 0x65, 0x10, 0xaa, 0x5e, 0xa9, 0x60, 0x2e, 0x21, 0x4c, 0x45, 0x42, 0x02, 0x5c, 0xcc,
	0xd9, 0xa9, 0x95, 0x60, 0x1f, 0x32, 0x07, 0x81, 0x98, 0x42, 0xea, 0x5c, 0xac, 0x65, 0x89, 0x39,
	0xa5, 0xa9, 0x60, 0xdf, 0x71, 0x1b, 0x09, 0x62, 0x58, 0x16, 0x04, 0x91, 0xb7, 0x62, 0xb2, 0x60,
	0x54, 0x32, 0xe0, 0xe2, 0x71, 0x0e, 0x46, 0x0a, 0x31, 0x34, 0x3f, 0x32, 0x62, 0xfa, 0xd1, 0x91,
	0x8b, 0x27, 0xd8, 0x19, 0x49, 0x87, 0x21, 0x17, 0x17, 0xc2, 0x9d, 0x60, 0x0d, 0x58, 0xed, 0x44,
	0x52, 0xe4, 0x24, 0x70, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c, 0x0f, 0x1e, 0xc9, 0x31,
	0xce, 0x78, 0x2c, 0xc7, 0x90, 0xc4, 0x06, 0x56, 0x6f, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x51,
	0xe2, 0x98, 0x81, 0xd8, 0x01, 0x00, 0x00,
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Playerid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Playerid))
	}
	if m.Accountid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Accountid))
	}
	if len(m.Accountname) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(len(m.Accountname)))
		i += copy(dAtA[i:], m.Accountname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerInfos) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfos) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Playerinfomap) > 0 {
		for k, _ := range m.Playerinfomap {
			dAtA[i] = 0x12
			i++
			v := m.Playerinfomap[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovPlayerinfo(uint64(msgSize))
			}
			mapSize := 1 + sovPlayerinfo(uint64(k)) + msgSize
			i = encodeVarintPlayerinfo(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintPlayerinfo(dAtA, i, uint64(k))
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintPlayerinfo(dAtA, i, uint64(v.Size()))
				n1, err1 := v.MarshalTo(dAtA[i:])
				if err1 != nil {
					return 0, err1
				}
				i += n1
			}
		}
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *CSPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Accountname) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(len(m.Accountname)))
		i += copy(dAtA[i:], m.Accountname)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SCPlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCPlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Playerinfo != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Playerinfo.Size()))
		n2, err2 := m.Playerinfo.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPlayerinfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.Playerid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Playerid))
	}
	if m.Accountid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Accountid))
	}
	l = len(m.Accountname)
	if l > 0 {
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerInfos) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Playerinfomap) > 0 {
		for k, v := range m.Playerinfomap {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovPlayerinfo(uint64(l))
			}
			mapEntrySize := 1 + sovPlayerinfo(uint64(k)) + l
			n += mapEntrySize + 1 + sovPlayerinfo(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *CSPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Accountname)
	if l > 0 {
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SCPlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Playerinfo != nil {
		l = m.Playerinfo.Size()
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlayerinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlayerinfo(x uint64) (n int) {
	return sovPlayerinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerid", wireType)
			}
			m.Playerid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playerid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfos) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfos: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfos: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerinfomap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playerinfomap == nil {
				m.Playerinfomap = make(map[int64]*PlayerInfo)
			}
			var mapkey int64
			var mapvalue *PlayerInfo
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPlayerinfo
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= int64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPlayerinfo
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPlayerinfo
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPlayerinfo
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PlayerInfo{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPlayerinfo(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthPlayerinfo
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Playerinfomap[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CSPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCPlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCPlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCPlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playerinfo == nil {
				m.Playerinfo = &PlayerInfo{}
			}
			if err := m.Playerinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerinfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlayerinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlayerinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlayerinfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlayerinfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlayerinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerinfo   = fmt.Errorf("proto: integer overflow")
)
