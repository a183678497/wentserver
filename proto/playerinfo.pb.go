// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: playerinfo.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CSPlayerBaseInfo struct {
	Accountid            int64    `protobuf:"varint,1,opt,name=accountid,proto3" json:"accountid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CSPlayerBaseInfo) Reset()         { *m = CSPlayerBaseInfo{} }
func (m *CSPlayerBaseInfo) String() string { return proto.CompactTextString(m) }
func (*CSPlayerBaseInfo) ProtoMessage()    {}
func (*CSPlayerBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{0}
}
func (m *CSPlayerBaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CSPlayerBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CSPlayerBaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CSPlayerBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CSPlayerBaseInfo.Merge(m, src)
}
func (m *CSPlayerBaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *CSPlayerBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CSPlayerBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CSPlayerBaseInfo proto.InternalMessageInfo

func (m *CSPlayerBaseInfo) GetAccountid() int64 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

type SCPlayerBaseInfo struct {
	Errid                int32           `protobuf:"varint,1,opt,name=errid,proto3" json:"errid,omitempty"`
	Playerinfo           *PlayerBaseInfo `protobuf:"bytes,2,opt,name=playerinfo,proto3" json:"playerinfo,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SCPlayerBaseInfo) Reset()         { *m = SCPlayerBaseInfo{} }
func (m *SCPlayerBaseInfo) String() string { return proto.CompactTextString(m) }
func (*SCPlayerBaseInfo) ProtoMessage()    {}
func (*SCPlayerBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{1}
}
func (m *SCPlayerBaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SCPlayerBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SCPlayerBaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SCPlayerBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SCPlayerBaseInfo.Merge(m, src)
}
func (m *SCPlayerBaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *SCPlayerBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SCPlayerBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SCPlayerBaseInfo proto.InternalMessageInfo

func (m *SCPlayerBaseInfo) GetErrid() int32 {
	if m != nil {
		return m.Errid
	}
	return 0
}

func (m *SCPlayerBaseInfo) GetPlayerinfo() *PlayerBaseInfo {
	if m != nil {
		return m.Playerinfo
	}
	return nil
}

type PlayerBaseInfo struct {
	Accountid            int64    `protobuf:"varint,1,opt,name=accountid,proto3" json:"accountid,omitempty"`
	Accountname          string   `protobuf:"bytes,2,opt,name=accountname,proto3" json:"accountname,omitempty"`
	Playeruid            int64    `protobuf:"varint,3,opt,name=playeruid,proto3" json:"playeruid,omitempty"`
	Playername           string   `protobuf:"bytes,4,opt,name=playername,proto3" json:"playername,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerBaseInfo) Reset()         { *m = PlayerBaseInfo{} }
func (m *PlayerBaseInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerBaseInfo) ProtoMessage()    {}
func (*PlayerBaseInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{2}
}
func (m *PlayerBaseInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerBaseInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerBaseInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerBaseInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerBaseInfo.Merge(m, src)
}
func (m *PlayerBaseInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerBaseInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerBaseInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerBaseInfo proto.InternalMessageInfo

func (m *PlayerBaseInfo) GetAccountid() int64 {
	if m != nil {
		return m.Accountid
	}
	return 0
}

func (m *PlayerBaseInfo) GetAccountname() string {
	if m != nil {
		return m.Accountname
	}
	return ""
}

func (m *PlayerBaseInfo) GetPlayeruid() int64 {
	if m != nil {
		return m.Playeruid
	}
	return 0
}

func (m *PlayerBaseInfo) GetPlayername() string {
	if m != nil {
		return m.Playername
	}
	return ""
}

type PlayerEquipInfo struct {
	Equipuid             int64    `protobuf:"varint,1,opt,name=equipuid,proto3" json:"equipuid,omitempty"`
	Equipid              int32    `protobuf:"varint,2,opt,name=equipid,proto3" json:"equipid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PlayerEquipInfo) Reset()         { *m = PlayerEquipInfo{} }
func (m *PlayerEquipInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerEquipInfo) ProtoMessage()    {}
func (*PlayerEquipInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{3}
}
func (m *PlayerEquipInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerEquipInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerEquipInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerEquipInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerEquipInfo.Merge(m, src)
}
func (m *PlayerEquipInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerEquipInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerEquipInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerEquipInfo proto.InternalMessageInfo

func (m *PlayerEquipInfo) GetEquipuid() int64 {
	if m != nil {
		return m.Equipuid
	}
	return 0
}

func (m *PlayerEquipInfo) GetEquipid() int32 {
	if m != nil {
		return m.Equipid
	}
	return 0
}

type PlayerInfo struct {
	//可继续添加player其他数据
	Equipdata            *PlayerEquipInfo `protobuf:"bytes,1,opt,name=equipdata,proto3" json:"equipdata,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *PlayerInfo) Reset()         { *m = PlayerInfo{} }
func (m *PlayerInfo) String() string { return proto.CompactTextString(m) }
func (*PlayerInfo) ProtoMessage()    {}
func (*PlayerInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_9830a6503a3131b4, []int{4}
}
func (m *PlayerInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PlayerInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PlayerInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PlayerInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PlayerInfo.Merge(m, src)
}
func (m *PlayerInfo) XXX_Size() int {
	return m.Size()
}
func (m *PlayerInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_PlayerInfo.DiscardUnknown(m)
}

var xxx_messageInfo_PlayerInfo proto.InternalMessageInfo

func (m *PlayerInfo) GetEquipdata() *PlayerEquipInfo {
	if m != nil {
		return m.Equipdata
	}
	return nil
}

func init() {
	proto.RegisterType((*CSPlayerBaseInfo)(nil), "proto.CSPlayerBaseInfo")
	proto.RegisterType((*SCPlayerBaseInfo)(nil), "proto.SCPlayerBaseInfo")
	proto.RegisterType((*PlayerBaseInfo)(nil), "proto.PlayerBaseInfo")
	proto.RegisterType((*PlayerEquipInfo)(nil), "proto.PlayerEquipInfo")
	proto.RegisterType((*PlayerInfo)(nil), "proto.PlayerInfo")
}

func init() { proto.RegisterFile("playerinfo.proto", fileDescriptor_9830a6503a3131b4) }

var fileDescriptor_9830a6503a3131b4 = []byte{
	// 267 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0xc8, 0x49, 0xac,
	0x4c, 0x2d, 0xca, 0xcc, 0x4b, 0xcb, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x05, 0x53,
	0x4a, 0x06, 0x5c, 0x02, 0xce, 0xc1, 0x01, 0x60, 0x49, 0xa7, 0xc4, 0xe2, 0x54, 0xcf, 0xbc, 0xb4,
	0x7c, 0x21, 0x19, 0x2e, 0xce, 0xc4, 0xe4, 0xe4, 0xfc, 0xd2, 0xbc, 0x92, 0xcc, 0x14, 0x09, 0x46,
	0x05, 0x46, 0x0d, 0xe6, 0x20, 0x84, 0x80, 0x52, 0x3c, 0x97, 0x40, 0xb0, 0x33, 0x9a, 0x0e, 0x11,
	0x2e, 0xd6, 0xd4, 0xa2, 0x22, 0xa8, 0x6a, 0xd6, 0x20, 0x08, 0x47, 0xc8, 0x94, 0x8b, 0x0b, 0x61,
	0xad, 0x04, 0x93, 0x02, 0xa3, 0x06, 0xb7, 0x91, 0x28, 0xc4, 0x7a, 0x3d, 0x54, 0x03, 0x82, 0x90,
	0x14, 0x2a, 0xf5, 0x31, 0x72, 0xf1, 0x91, 0xe2, 0x22, 0x21, 0x05, 0x2e, 0x6e, 0x28, 0x27, 0x2f,
	0x31, 0x37, 0x15, 0x6c, 0x11, 0x67, 0x10, 0xb2, 0x10, 0x48, 0x3f, 0xc4, 0x82, 0xd2, 0xcc, 0x14,
	0x09, 0x66, 0x88, 0x7e, 0xb8, 0x80, 0x90, 0x1c, 0xcc, 0x9d, 0x60, 0xed, 0x2c, 0x60, 0xed, 0x48,
	0x22, 0x4a, 0xee, 0x5c, 0xfc, 0x10, 0xf7, 0xb8, 0x16, 0x96, 0x66, 0x16, 0x80, 0x1d, 0x24, 0xc5,
	0xc5, 0x91, 0x0a, 0xe2, 0x94, 0xc2, 0xdd, 0x03, 0xe7, 0x0b, 0x49, 0x70, 0xb1, 0x83, 0xd9, 0x99,
	0x29, 0x60, 0xa7, 0xb0, 0x06, 0xc1, 0xb8, 0x4a, 0x4e, 0x5c, 0x5c, 0x10, 0x83, 0xc0, 0x66, 0x98,
	0x70, 0x71, 0x82, 0x25, 0x52, 0x12, 0x4b, 0x12, 0xc1, 0x86, 0x70, 0x1b, 0x89, 0xa1, 0x84, 0x0e,
	0xdc, 0xba, 0x20, 0x84, 0x42, 0x27, 0x81, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c,
	0xf0, 0x48, 0x8e, 0x71, 0xc6, 0x63, 0x39, 0x86, 0x24, 0x36, 0xb0, 0x1e, 0x63, 0x40, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x0c, 0x8e, 0x2b, 0x92, 0xe4, 0x01, 0x00, 0x00,
}

func (m *CSPlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CSPlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Accountid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Accountid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *SCPlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SCPlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Errid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Errid))
	}
	if m.Playerinfo != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Playerinfo.Size()))
		n1, err1 := m.Playerinfo.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerBaseInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerBaseInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Accountid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Accountid))
	}
	if len(m.Accountname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(len(m.Accountname)))
		i += copy(dAtA[i:], m.Accountname)
	}
	if m.Playeruid != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Playeruid))
	}
	if len(m.Playername) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(len(m.Playername)))
		i += copy(dAtA[i:], m.Playername)
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerEquipInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerEquipInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Equipuid != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Equipuid))
	}
	if m.Equipid != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Equipid))
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func (m *PlayerInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Equipdata != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPlayerinfo(dAtA, i, uint64(m.Equipdata.Size()))
		n2, err2 := m.Equipdata.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	if m.XXX_unrecognized != nil {
		i += copy(dAtA[i:], m.XXX_unrecognized)
	}
	return i, nil
}

func encodeVarintPlayerinfo(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *CSPlayerBaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accountid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Accountid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SCPlayerBaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Errid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Errid))
	}
	if m.Playerinfo != nil {
		l = m.Playerinfo.Size()
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerBaseInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Accountid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Accountid))
	}
	l = len(m.Accountname)
	if l > 0 {
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.Playeruid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Playeruid))
	}
	l = len(m.Playername)
	if l > 0 {
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerEquipInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Equipuid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Equipuid))
	}
	if m.Equipid != 0 {
		n += 1 + sovPlayerinfo(uint64(m.Equipid))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PlayerInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Equipdata != nil {
		l = m.Equipdata.Size()
		n += 1 + l + sovPlayerinfo(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovPlayerinfo(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPlayerinfo(x uint64) (n int) {
	return sovPlayerinfo(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CSPlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CSPlayerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CSPlayerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SCPlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SCPlayerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SCPlayerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Errid", wireType)
			}
			m.Errid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Errid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playerinfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Playerinfo == nil {
				m.Playerinfo = &PlayerBaseInfo{}
			}
			if err := m.Playerinfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerBaseInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerBaseInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerBaseInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountid", wireType)
			}
			m.Accountid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Accountid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accountname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accountname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playeruid", wireType)
			}
			m.Playeruid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Playeruid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Playername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Playername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerEquipInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerEquipInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerEquipInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipuid", wireType)
			}
			m.Equipuid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Equipuid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipid", wireType)
			}
			m.Equipid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Equipid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PlayerInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Equipdata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Equipdata == nil {
				m.Equipdata = &PlayerEquipInfo{}
			}
			if err := m.Equipdata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPlayerinfo(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPlayerinfo
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPlayerinfo(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPlayerinfo
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPlayerinfo
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPlayerinfo
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthPlayerinfo
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPlayerinfo
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPlayerinfo(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthPlayerinfo
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPlayerinfo = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPlayerinfo   = fmt.Errorf("proto: integer overflow")
)
